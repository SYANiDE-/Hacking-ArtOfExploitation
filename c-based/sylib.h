void *chk_malloc(unsigned int);
void fe(char *);

void *chk_malloc(unsigned int sz){
   void *pt;
   pt = malloc(sz);
   if(pt == NULL){
      fe("Couldn't alloc ptr of bytes size supplied!\n");
      exit(-1);
   }
   return pt;
}

void fe(char *msg){
   char e[256];
   strcpy(e, "[!] ERROR: ");
   strncat(e, msg, strlen(msg));
   perror(e);
   exit(-1);
}

void dump8(const unsigned char *buf, const unsigned int len){
   unsigned char byte;
   unsigned int x, y;
   for(x=0; x<len; x++){
      byte = buf[x];
      if((x%8)==0){
         printf("%04d : %08x | ", x, &buf[x]);
      }
      printf("%02x ", buf[x]);
      if(((x%8)==7) || (x==len-1)){
         for(y=0; y<7-(x%8); y++){
            printf("   ");
         }
         printf("| ");
         for(y=(x-(x%8)); y<=x; y++){
            byte = buf[y];
            if((byte>31) && (byte<127)){
               printf("%c", byte);
            }else{
               printf(".");
            }
         }
         printf("\n");
      }
   }
}

void dump16(const unsigned char *buf, const unsigned int len){
   unsigned char byte;
   unsigned int x, y;
   for(x=0; x<len; x++){
      byte = buf[x];
      if((x%16)==0){
         printf("%04d : %08x | ", x, &buf[x]);
      }
      printf("%02x ", buf[x]);
      if(((x%16)==15) || (x==len-1)){
         for(y=0; y<15-(x%16); y++){
            printf("   ");
         }
         printf("| ");
         for(y=(x-(x%16)); y<=x; y++){
            byte = buf[y];
            if((byte>31) && (byte<127)){
               printf("%c", byte);
            }else{
               printf(".");
            }
         }
         printf("\n");
      }
   }
}

