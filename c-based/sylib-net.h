

/* Sends everything.  Wants socket fd and pointer-to null-terminated string.
 * Returns 1 if success, 0 if fail; counterintuitive.
 */
int sendBytes(int sockfd, unsigned char *buf){
   int bytesSent, bytesToSend = strlen(buf);
   while (bytesToSend > 0){
      bytesSent = send(sockfd, buf, bytesToSend, 0);
      if(bytesSent == -1){
         return(0);
      }
      bytesToSend -= bytesSent;
      buf += bytesSent;
   }
   return (1);
}


/* Takes socket fd, pointer-to buffer (storage).
 * Receives bytes until EOL sequence of chars is encountered.
 * Stores bytes in buffer, strips EOL sequence and null-terminates.
 * Returns size of the receive buffer.
 */
int recvCRLF(int sockfd, unsigned char *dest_buf){
#define EOL "\r\n"
#define EOL_sz 2
   unsigned char *chptr;
   int EOL_matched = 0;
   chptr = dest_buf;
   while(recv(sockfd, chptr, 1, 0) == 1){
      if(*chptr == EOL[EOL_matched]){
         EOL_matched++;
         if(EOL_matched == EOL_sz){
            *(chptr+1-EOL_sz) = '\0';
            return(strlen(dest_buf));
         }
      } else {
         EOL_matched = 0;
      }
      chptr++;
   }
   return(0); //didn't find EOL
}
